
the application developer relies on the service level agrement (SLA) delivered by the container orchestration API

managed K8S as a service (KaaS)

Decoupled teams:

Application Ops/SRE
        ^
        |
     K8S API
        |
        v
Cluster Ops/SRE
       ^
       |
  Kernel SysCall API
       |
       v
Kernel Ops/SRE
        ^
        |
  CPU (x86, ARM, etc.)
        |
        v
Hardware Ops/SRE

Ops = Operations teams
SRE = Site Reliability Engineers

Application programs, typically:
- language runtime
- libraries
- source code
- external shared libraries, libc, libssl

Google Cloud Platform registry, "Google Container Registry"

Generally in K8S, containers are launched by a daemon on each node called the kubelet

Google: https://cloud.google.com/kubernetes-engine/
Setting default zone: gcloud config set compute/zone us-west1-a
Create a cluster: gcloud container clusters create kuar-cluster. Takes several minutes
Get cluster credentials: gcloud auth application-default login

Azure (aks = Azure Kubernetes Service):
Creating resource group: az group create --name=kuar --location=westus
Create a cluster: az aks create --resource-group=kuar --name=kuar-cluster. Takes several minutes
Get cluster credentials: az aks get-credentials --resource-group=kuar --name=kuar-cluster
kubectl tool: az aks install-cli

AWS (eks = elastic kubernetes services):
eksctl create cluster --name kuar-cluster
eksctl create cluster --help

Locally, minikube:
minikube start
minikube stop
minikube delete

lots of docs:
- https://kubernetes.io/docs/home/
- https://kubernetes.io/docs/reference/kubectl/overview/

kubectl version:
- local kubectl tool version
- k8s api server version

kubectl get componentstatuses: cluster diagnostics

controller-manager: entry.cmd
scheduler: worker.cmd
etcd: storage for cluster, where all API objects are stored

cluster components, components that make up the cluster, actually deployed using kubernetes itself. These have sort of like important concepts to fathom. All of these components will run in the kube-system namespace.

Kubernetes Proxy: routing network traffic to load-balanced services. Proxy must be present on every node. API object, DaemonSet
(doesn't work) kubectl get daemonSets --namespace=kube-system kube-proxy
Kubernetes DNS: naming and service discovery. Also run as replicated service. One or more DNS servers

