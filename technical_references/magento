
this is an eCommerce platform

Very useful links:
- https://magento.stackexchange.com/questions/104380/server-error-500-after-install
- https://www.mageplaza.com/magento-2-module-development/how-to-create-crud-model-magento-2.html
- https://devdocs.magento.com/guides/v2.3/extension-dev-guide/bk-extension-dev-guide.html
- https://devdocs.magento.com/guides/v2.3/config-guide/bk-config-guide.html
- https://devdocs.magento.com/guides/v2.3/architecture/archi_perspectives/components/modules/mod_intro.html
- https://devdocs.magento.com/guides/v2.3/mrg/intro.html
- https://devdocs.magento.com/guides/v2.3/coding-standards/bk-coding-standards.html
- https://devdocs.magento.com/guides/v2.3/install-gde/install-roadmap_cli.html
- https://magento.com/technical-resources, they have developer documentation there
- https://magento.stackexchange.com/questions/97291/explanation-of-ui-component-grid-in-magento-2

Important xsds:
- urn:magento:framework:App/Language/package.xsd
- urn:magento:framework:Event/etc/events.xsd
- urn:magento:framework:App/etc/routes.xsd
- urn:magento:framework:Module/etc/module.xsd
- urn:magento:framework:View/Layout/etc/page_configuration.xsd
- urn:magento:framework:ObjectManager/etc/config.xsd
- urn:magento:framework:Acl/etc/acl.xsd
- urn:magento:framework:Config/etc/theme.xsd
- urn:magento:module:Magento_Ui:etc/ui_configuration.xsd
- urn:magento:module:Magento_Config:etc/system_file.xsd
- urn:magento:module:Magento_Backend:etc/menu.xsd

important/interesting classes/interfaces:
- \Magento\Backend\Block\Template
- \Magento\Framework\Component\ComponentRegistrar
- \Magento\Framework\App\RequestInterface
- \Magento\Framework\App\Action\Action
- \Magento\Framework\App\ActionInterface. Suggested way of doing things from the above's recommendation
- \Magento\Backend\Block\Widget\Form\Generic: generic form data
- \Magento\Backend\Block\Widget\ContainerInterface extends \Magento\Backend\Block\Widget\Button\ContextInterface
- \Magento\Payment\Model\Method\AbstractMethod

Context:
- \Magento\Framework\App\RequestInterface
- \Magento\Framework\App\ResponseInterface
- \Magento\Framework\ObjectManagerInterface, create($type, $arguments = []), get($type), configure(array $configuration)
- \Magento\Framework\Event\ManagerInterface
- \Magento\Framework\UrlInterface
- \Magento\Framework\App\Response\RedirectInterface
- \Magento\Framework\App\ActionFlag
- \Magento\Framework\App\ViewInterface
- \Magento\Framework\Message\ManagerInterface
- \Magento\Framework\Controller\Result\RedirectFactory
- \Magento\Framework\Controller\ResultFactory

Requirements: https://devdocs.magento.com/guides/v2.3/install-gde/system-requirements.html

php packages:
- php-bcmath
- php-curl
- php-gd
- php-intl
- php-soap
- php-zip
- php-mbstring
- php-dom (automatically, it says it will install php7.2-xml)
- pdo-mysql (php-mysql)

common pit falls:
- inner container thinks it's using http, while the https layer was stripped from the outside already. Solution: add $_SERVER["HTTPS"] = "On"; to the bootstrap file
- mysql image version 8 has weird authentication schemes
- .htaccess files are not read properly -> infinite recursion
- rewrite rules are not configured correctly -> infinite recursion

tar ball: on magento's github page: https://github.com/magento/magento2/archive/2.3.3.tar.gz

      catalog ---(product database)--- X            [global]
                                       |
                                       |
                                       X            [website]
                                       |
                                       |
   root category ---(menu container)---X            [store]
                                       |
                                       |
                                   X---X---X
                                   |   |   |
subcategories ---(menu options)--- X   X   X        [store view]

entry points
- http: Framework\App\Http
- static: Framework\App\StaticResource
- media: Magento\MediaStorage\App\Media

events:
- define observers in event.xml
- define Observer class based on \Magento\Framework\Event\ObserverInterface, define execute(...) function
- dispatch event using \Magento\Framework\Event\ManagerInterface->dispatch('{event_identifier}', ['key1' => 'value1'])

static files are stored in:
- pub/static/frontend/<Vendor>/<theme>/<language>
- <theme_dir>/media
- <theme_dir>/web

getting through the docs to get the feel of the space magento is taking up:
- Basic config: https://docs.magento.com/m2/ce/user_guide/configuration/configuration-basic.html
- Tech resources, with user guides: https://magento.com/technical-resources?_ga=2.79851412.2069121135.1571678125-797795375.1571410044
- Stuff to check over before the store goes live: https://docs.magento.com/m2/ce/user_guide/magento/prelaunch-checklist.html
- open source user guide (pdf): https://docs.magento.com/m2/pdf/ce/Magento-Open-Source-2.2-User-Guide.pdf

after the 1800 pages: https://docs.magento.com/m2/ce/user_guide/getting-started.html

prelaunch checklist:
- general:
  - urls
  - certificates
  - email addresses
- marketing
  - email templates
  - sales comms
  - google tools
- sales settings:
  - cart options
  - checkout options
  - taxes
  - shipping methods
  - paypal
  - payment methods
- system
  - cron

https://www.youtube.com/watch?v=C4VoeHmTN2E&list=PLtaXuX0nEZk9eL59JGE3ny-_GAU-z5X5D&index=6

------------------------

so, the book:

M2 improvements:
- Performance
- Payment method
- Checkout
- Catalog
- CMS
- Web API
- Framework
- Setup

- Web Users (frontend/backend)
  - Products
  - Marketing
  - Content
  - Customers
  - Sales
  - Reports
- Service Consumers (API and endpoints)
- Service Layers (interface/contracts)
- Models (resources/databases)

cli responsibilities:
- set urn highlighter
- convert layout to XML files

/app/design/frontend/<Vendor>/
- <theme 1>
- <theme 2>

Magento_Customer has specific .css and .html files to handle Customer module

<theme dir>/
  <Vendor>_<Module>/ <---- I guess these are for overriding previous data and files, because the extras are below.
    web/
    css/
      source/
    layout/
      override/
    templates/
  etc/
  i18n/
  media/ <------ static
  web/ <-------- static
    css/
      source/
    fonts/
    images/
    js/
  composer.json <----- dependencies and meta information
  registration.php <-- registering with the whole system
  theme.xml <--------- extra meta info. I figure, this can be included in registration.php

Luma theme: implements responsive web design (RWD), based on magento's ui library, uses css3 media queries for screen width, meaning mobile is fine.

reusable components:
- actions toolbar
- breadcrumbs
- buttons
- drop-down menus
- forms
- icons
- layout
- loaders
- messages
- pagination
- popups
- ratings
- sections
- tabs and accordions
- tables
- tooltips
- typography
- list of theme variables

luma theme uses some elements of blank theme to be functional, located at /vendor/magento/theme-frontend-blank folder, "declared" parent theme of luma. Logically, each theme will be at different folders, but because the code reuse thingy, they decided to do something called theme inheritance.

custom variables, {{config path="web/unsecure/base_url"}}
{{CustomVar code="dev_name"}}
{{store url=""}}
{{media url="wysiwyg/home-main.jpg"}}
https://docs.magento.com/m2/ce/user_guide/marketing/variables-custom.html

app/design/frontend/Packt <----- vendor's theme directory
  basic <----- theme directory
    theme.xml
    registration.php
    composer.json
    etc
      view.xml <----------- bunch of image sizings, variables
    web <-------- gonna be placed in pub
      css
        source
      fonts
      images
        logo.svg <------ default logo. If not .svg, then have to declare it
      js
    Magento_Theme
      web <-------- gonna be placed in pub
        images
          logo.png
      layout
        default.xml <------- overriding values from parent themes (using referenceBlock mechanism)
    Magento_Catalog

/etc/view.xml: https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/themes/theme-images.html

change theme: Content | Design | Configuration

sample composer:
{
  "name": "packt/compstore",
  "description": "CompStore electronics theme",
  "require": {
    "php": "~5.5.0|~5.6.0|~7.0.0",
    "magento/theme-frontend-luma": "~100.0",
    "magento/framework": "~100.0"
  },
  "type": "magento2-theme", <--------- predefined by magento docs
  "version": "1.0.0",
  "license": [
    "OSL-3.0",
    "AFL-3.0"
  ],
  "autoload": ["registration.php"]
}

using css files, I assume is in one of the .xml files
<head>
    <css src="css/styles-m.css"/>
    <css src="css/styles-l.css" media="screen and (min-width: 768px)"/>
    <css src="css/print.css" media="print"/>
</head>
source of these files:
<theme dir>/web/css/styles-m.less
web/css/styles-l.less
web/css/print.less

less stuff, process these (https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/css-topics/css-preprocess.html):
- @import
- @magento_import
files resolved by less are copied to /var/view_preprocessed/less, other parts are understood to be saved at /var/cache
resulting .css gets published to pub/static/frontend/<Vendor>/<theme>/<locale>
then I can deploy the static files using magento setup:static-content:deploy

vendor/magento/theme-frontend-blank/web/css/_styles.less -> app/design/frontend/Packt/compstore/web/css/_styles.less:
  @import 'source/lib/_lib.less'
  @import 'source/_sources.less'
  @import 'source/_components.less'
  @import 'source/_compstore.less'
source
  _compstore.less
    @color-compstore: #F6F6F6;
    body {
      background: @color-compstore
    }
  _theme.less

https://magento.stackexchange.com/questions/102260/find-out-the-name-for-a-referenceblock-in-magento-2

widget types (https://magenticians.com/create-widget-in-magento-2/):
- cms page link
- cms static block
- catalog category link
- catalog new products list
- catalog product link
- catalog products list
- orders and returns
- recently compared products
- recently viewed products

block-title

speeding up chapter, topics covered:
- apache web server deflation: mod_deflate, compresses output
- enabling expires header: mod_expires, tell client to cache stuff

\Magento\Framework\View\Result\PageFactory::TYPE_PAGE

------------

so, going over a new magento book

cache types:
- config
- layout
- block_html
- collections: result of db queries
- db_ddl: database schema
- eav: eav attributes: store labels, attrib rendering, search settings, etc
- full_page: generated html pages
- reflection
- translate: merge all translations
- config_integration: compiled integrations
- config_integration_api: compiled integration apis
- config_webservice: web api structure

define:
- website: top level container, parent level, can use on different domain names, different shipping methods, payment options, customers, orders, etc
- store: same data, different storeviews. Always connected to a root catalog that holds categories and subcategories. Not possible to share 1 basket. Shipping, catalog, customer, inventory, taxes and payment settings cannot be shared between sites
- storeview: lowest level, usually used to handle different localizations. Can be used for B2B, like hidden private sales pages

shoes:
- colors
- brands
- sizes

snowboard:
- weight
- length
- torsion
- manufacturer
- style

products:
- simple product: physical, damn simple, no options
- configurable product: combination of simple products with different color, sizes, etc
- grouped product: collection of somple products that relate to each other. Like, camera, memory, photo bag. The combo costs less
- virtual product: non-physical
- bundle product: extension of grouped products
- downloadable product
- gift card (EE only)

managing, which I skipped for now because again, it's not what I really want to do. The real meat is to be able to have extensions and whatnot:
- shipping & tax rules
- managing customer groups
- configure inventories
- configure currency rates
- advanced pricing

the layout files are split per layout handle. A layout handle is a unique identifier for the layout definitions that are used to build the page. 3 different types of layout handles:
- page type layout handles: identify the page based on full action names of the controller (customer_account_create). Right, so this is the xml that the other book was referencing, but don't really mention anything related to layout files
- page layout handles: added identifiers based on a product type shown (catalog_product_view_type_downloadable)
- custom handles: added custom identifiers not referencing to any page

template files: Magento_Customer/view/frontend/templates/form/register.phtml -> {theme dir}/Magento_Customer/templates/form/register.phtml

overriding example, app/design/frontend/Genmato/default/Magento_Catalog/layout/catalog_product_view.xml
<?xml version="1.0"?>
<page layout="1column" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
  <body>
    <move element="product.info.stock.sku"
      destination="product.info.price"
      after="product.price.final"/>
    <move element="product.info.review"
      destination="product.info.main"
      after="product.info.price"/>
    <remove name="report.bugs"/>
  </body>
</page>

available default widgets:
- cms page link
- cms static block
- catalog category link
- catalog new products list
- catalog product link
- catalog product list
- orders and returns
- recently compared products
- recently viewed products

so, covered topics:
- initializing extension basics
- working with database models. Yay. This part isn't covered by the other book
- create tables using setup scripts. Also a yay
- create a web route and controller to display data. I think I understand this part well enough already
- create system configuration fields
- create backend data grid
- create backend form to add/edit data

some configs can be area-specific. RIght, so these options, the extra ones, are interesting and I haven't seen them before:
- adminhtml
- frontend
- cron
- api

the template file is optional
