
this is an eCommerce platform

Links:
- https://magento.com/blog
- https://magento.com/technical-resources, they have developer documentation there
- https://magento.com/resources
- A webinar with FH photo: https://magento.com/resources/evolving-b2bcx
- https://magento.com/products/magento-open-source
- https://magento.com/products/order-management
- https://magento.com/products

Very useful links:
- https://magento.stackexchange.com/questions/104380/server-error-500-after-install

Requirements: https://devdocs.magento.com/guides/v2.3/install-gde/system-requirements.html

typical configs:
- db: localhost, mg, password, magento, mg_
- admin account: 157239n, UDZ8qSnsfZeHHKHM
- encryption key: ba0d0e00327f5c40e639c9e78644988c

php packages:
- php-bcmath
- php-curl
- php-gd
- php-intl
- php-soap
- php-zip
- php-mbstring
- php-dom (automatically, it says it will install php7.2-xml)
- pdo-mysql (php-mysql)

tar ball: on magento's github page: https://github.com/magento/magento2/archive/2.3.3.tar.gz

getting through the docs to get the feel of the space magento is taking up:
- Basic config: https://docs.magento.com/m2/ce/user_guide/configuration/configuration-basic.html
- Tech resources, with user guides: https://magento.com/technical-resources?_ga=2.79851412.2069121135.1571678125-797795375.1571410044
- Stuff to check over before the store goes live: https://docs.magento.com/m2/ce/user_guide/magento/prelaunch-checklist.html
- open source user guide (pdf): https://docs.magento.com/m2/pdf/ce/Magento-Open-Source-2.2-User-Guide.pdf

great, now I have 1800 pages to go through

after the 1800 pages: https://docs.magento.com/m2/ce/user_guide/getting-started.html

list of resources types:
- product docs
- magento resource library
- security center
- forums
- blog
- events and webinars
- magento marketplace
- training and certification
- partners
- expert consulting services

so, there're apparently 2 modes: production or developer

prelaunch checklist:
- general:
  - urls
  - certificates
  - email addresses
- marketing
  - email templates
  - sales comms
  - google tools
- sales settings:
  - cart options
  - checkout options
  - taxes
  - shipping methods
  - paypal
  - payment methods
- system
  - cron

urn:magento:framework:App/Language/package.xsd

Magento components, including modules, themes, and language packages, must be registered in the Magento system through the Magento ComponentRegistrar class
Each component must have a file called registration.php in its root directory

use \Magento\Framework\Component\ComponentRegistrar;

Modules (in /app/code/):
ComponentRegistrar::register(ComponentRegistrar::MODULE, '<VendorName_ModuleName>', __DIR__);
ComponentRegistrar::register(ComponentRegistrar::MODULE, 'Magento_AdminNotification', __DIR__);

Themes (in /app/design/, area = ["frontend", "adminhtml"]):
ComponentRegistrar::register(ComponentRegistrar::THEME, '<area>/<vendor>/<theme name>', __DIR__);
ComponentRegistrar::register(ComponentRegistrar::THEME, 'frontend/Magento/luma', __DIR__);

Language package (in /app/i18n/):
ComponentRegistrar::register(ComponentRegistrar::LANGUAGE, '<VendorName>_<packageName>', __DIR__);
ComponentRegistrar::register(ComponentRegistrar::LANGUAGE, 'magento_de_de', __DIR__);

Libraries (in /lib/internal):
ComponentRegistrar::register(ComponentRegistrar::LIBRARY, '<vendor>/<library_name>', __DIR__);
ComponentRegistrar::register(ComponentRegistrar::LIBRARY, 'magento/framework', __DIR__);

namespace Alpine\ACH\Model;
use Magento\Payment\Model\Method\AbstractMethod;

i18n

code standards: https://devdocs.magento.com/guides/v2.3/coding-standards/bk-coding-standards.html
module reference guide: https://devdocs.magento.com/guides/v2.3/mrg/intro.html
extension dev guide: https://devdocs.magento.com/guides/v2.3/extension-dev-guide/bk-extension-dev-guide.html
architecture guide: https://devdocs.magento.com/guides/v2.3/architecture/archi_perspectives/components/modules/mod_intro.html

https://devdocs.magento.com/guides/v2.3/extension-dev-guide/build/XSD-XML-validation.html
https://devdocs.magento.com/guides/v2.3/extension-dev-guide/build/component-registration.html
https://devdocs.magento.com/guides/v2.3/config-guide/bootstrap/magento-modes.html
https://glossary.magento.com/module/
https://devdocs.magento.com/guides/v2.3/architecture/tech-stack.html
https://devdocs.magento.com/guides/v2.3/extension-dev-guide/intro/developers_roadmap.html


replication steps:
- composer install
- bin/magento setup:uninstall
- wizard
- bin/magento setup:install --db-host=localhost --db-name=magento --db-user=mg --db-password=UDZ8qSnsfZeHHKHM --admin-user=157239n --admin-password=UDZ8qSnsfZeHHKHM --admin-email=157239q@gmail.com --admin-firstname=Quang --admin-lastname=Ho --base-url=http://magento.u4.kelvinho.org --use-secure=1 --use-secure-admin=1 --base-url-secure=https://magento.u4.kelvinho.org

kay, so now build a fully fledge image, with everything in it, of the standard magento distribution, and the current pmi-specific distribution. After I get the mail going


look into magento cdn integration. Basically how can I force magento to use spaces to cache stuff and store stuff too

and see how magento handles money, duh

list of basic magento stuff to go over: https://www.youtube.com/watch?v=C4VoeHmTN2E&list=PLtaXuX0nEZk9eL59JGE3ny-_GAU-z5X5D&index=6






setting modes:
rm -rf <magento_root>/generated/metadata/* <magento_root>/generated/code/*
bin/magento deploy:mode:set developer
bin/magento deploy:mode:set default

modules:
magento module:enable [-c|--clear-static-content] modules
magento module:status
magento setup:upgrade
magento cache:clean

db:
magento setup:db-schema:upgrade
magento setup:db:status

cron:
magento cron:install [--force]

tasks:
compare local fresh vs pmi modified

existing structure:
- https://devdocs.magento.com/guides/v2.3/extension-dev-guide/prepare/prepare.html
- https://devdocs.magento.com/guides/v2.3/install-gde/install-roadmap_cli.html
- https://devdocs.magento.com/guides/v2.3/extension-dev-guide/prepare/prepare_file-str.html

------------------------

so, the book:

M2 improvements:
- Performance
- Payment method
- Checkout
- Catalog
- CMS
- Web API
- Framework
- Setup

security:
- password management
- XSS
- permissions
- click jacking exploits
- non-default admin url

- Web Users (frontend/backend)
  - Products
  - Marketing
  - Content
  - Customers
  - Sales
  - Reports
- Service Consumers (API and endpoints)
- Service Layers (interface/contracts)
- Models (resources/databases)

cli responsibilities:
- install
- manage cache
- manage indexers
- manage cron
- compile code
- set magento mode
- set urn highlighter
- dependency reports
- translate dictionaries & language packages
- deploy static files
- create symlinks to LESS files
- run unit tests
- convert layout to XML files
- generate data for performance testing
- create css from less

magento:
- cache:status
- cache: disable
- indexer:info
- indexer:status
- indexer:reindex

SEO details:

covered topics:
- magento SEO management
- SEO catalog configuration
- XML sitemapmanager
- Google Analytics tracking code
- optimizing Magento pages, products, and categories

Theme dev details

covered topics:
- theme basic concepts
- theme structure
- luma theme
- theme inheritance
- cms block & pages
- custom variables
- creating a theme

/app/design/frontend/<Vendor>/
- <theme 1>
- <theme 2>

Magento_Customer has specific .css and .html files to handle Customer module

/vendor/magento/theme-frontend-luma
static files published at:
- /pub/static/frontend/<Vendor>/<theme>/<language>

<theme dir>/
  <Vendor>_<Module>/ <---- I guess these are for overriding previous data and files, because the extras are below.
    web/
    css/
      source/
    layout/
      override/
    templates/
  etc/
  i18n/
  media/ <------ static
  web/ <-------- static
    css/
      source/
    fonts/
    images/
    js/
  composer.json <----- dependencies and meta information
  registration.php <-- registering with the whole system
  theme.xml <--------- extra meta info. I figure, this can be included in registration.php

Luma theme: implements responsive web design (RWD), based on magento's ui library, uses css3 media queries for screen width, meaning mobile is fine.

reusable components:
- actions toolbar
- breadcrumbs
- buttons
- drop-down menus
- forms
- icons
- layout
- loaders
- messages
- pagination
- popups
- ratings
- sections
- tabs and accordions
- tables
- tooltips
- typography
- list of theme variables

luma theme uses some elements of blank theme to be functional, located at /vendor/magento/theme-frontend-blank folder, "declared" parent theme of luma. Logically, each theme will be at different folders, but because the code reuse thingy, they decided to do something called theme inheritance.

I figure this sort of works like docker layers, where each build command just layer things above it and make they all work together, I guess

- new theme in app/design/frontend/<Vendor>/<theme>
- declare Magento/blank as parent
- theme.xml
- registration.php

customization in the admin section too. Admin can create "block" and "content", like Home, About us, or any other static pages

custom variables, {{config path="web/unsecure/base_url"}}
{{CustomVar code="dev_name"}}
{{store url=""}}
{{media url="wysiwyg/home-main.jpg"}}
https://docs.magento.com/m2/ce/user_guide/marketing/variables-custom.html

disabling cache management

app/design/frontend/Packt <----- vendor's theme directory
  basic <----- theme directory
    theme.xml
    registration.php
    composer.json
    etc
      view.xml <----------- bunch of image sizings, variables
    web <-------- gonna be placed in pub
      css
        source
      fonts
      images
        logo.svg <------ default logo. If not .svg, then have to declare it
      js
    Magento_Theme
      web <-------- gonna be placed in pub
        images
          logo.png
      layout
        default.xml <------- overriding values from parent themes (using referenceBlock mechanism)
    Magento_Catalog

/etc/view.xml: https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/themes/theme-images.html

change theme: Content | Design | Configuration

sample composer:
{
  "name": "packt/compstore",
  "description": "CompStore electronics theme",
  "require": {
    "php": "~5.5.0|~5.6.0|~7.0.0",
    "magento/theme-frontend-luma": "~100.0",
    "magento/framework": "~100.0"
  },
  "type": "magento2-theme", <--------- predefined by magento docs
  "version": "1.0.0",
  "license": [
    "OSL-3.0",
    "AFL-3.0"
  ],
  "autoload": ["registration.php"]
}

using css files, I assume is in one of the .xml files
<head>
    <css src="css/styles-m.css"/>
    <css src="css/styles-l.css" media="screen and (min-width: 768px)"/>
    <css src="css/print.css" media="print"/>
</head>
source of these files:
<theme dir>/web/css/styles-m.less
web/css/styles-l.less
web/css/print.less

less stuff, process these (https://devdocs.magento.com/guides/v2.3/frontend-dev-guide/css-topics/css-preprocess.html):
- @import
- @magento_import
files resolved by less are copied to /var/view_preprocessed/less, other parts are understood to be saved at /var/cache
resulting .css gets published to pub/static/frontend/<Vendor>/<theme>/<locale>
then I can deploy the static files using magento setup:static-content:deploy

vendor/magento/theme-frontend-blank/web/css/_styles.less -> app/design/frontend/Packt/compstore/web/css/_styles.less:
  @import 'source/lib/_lib.less'
  @import 'source/_sources.less'
  @import 'source/_components.less'
  @import 'source/_compstore.less'
source
  _compstore.less
    @color-compstore: #F6F6F6;
    body {
      background: @color-compstore
    }
  _theme.less

https://magento.stackexchange.com/questions/102260/find-out-the-name-for-a-referenceblock-in-magento-2

widget types (https://magenticians.com/create-widget-in-magento-2/):
- cms page link
- cms static block
- catalog category link
- catalog new products list
- catalog product link
- catalog products list
- orders and returns
- recently compared products
- recently viewed products

block-title

right, so a block is just a normal block, which can use other complex block and container structures inside, and they can have other stuff inside too. Each of those elements have a class which is in charge for controlling everything about it, like setting the data source (the ResourceModel thingy) and viewing things.

a widget is a reference block that inserts itself into the standard layouts, and which contains the content of a specific block. So yeah, the idea is sound, but the execution and the explanation is absolutely terrible.


Extension dev details

Covered:
- overview
- zend framework basics
- magento extension structure
- twitter rest api
- twitter oauth
- magento extension project - TweetsAbout

Zend framework benefits (framework.zend.com):
- everyone knows it
- great web service support to integrate magento with different software
- mvc

module file structure:
app/code/<Vendor>/<Moduke>
  core:
    Block: View classes , visualization layers between logical and frontend layer
    Controller: control all actions. Process requests, then redirects to a specific module
    etc: all xml config files
    Helper: auxiliary classes, providing forms, validators & formatters, which is commonly used in business logic
    Model: business logic and access to data
    Setup: setup classes
  additionals:
    Api: classes to control api layers
    i18n: translating the module view layer
    Plugin: interception
    view: templates and layouts
    composer.json
    registration.php

Yeah I pretty much understand everything here, like what's what, and the general vibe of how these things fit together. However, the classes connections, and the details of the classes, they are still quite elusive

so, get latest tweets with #magento, #packt, #php tags. 2 pages:
- 1: link to results
- 2: show tweets

dev.twitter.com/rest/public

provide programatic access to read and write twitter data

real, working folder structure:
app/Packt/TweetsAbout
  Api
  Block
  Controller
  etc
  Observer
  view
  composer.json
  registration.php
