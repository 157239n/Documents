
%load_ext cython, for importing
%%cython, for compilation
%%cython --annotate, for analysis
%%cython --force, for forcing recompilation even if code doesn't change

ctypedef fused my_type:
	int
	double
	long long

@cython.boundscheck(False)
@cython.wraparound(False)
def compute(my_type[:, ::1] array_1, my_type[:, ::1] array_2, my_type a, my_type b, my_type c):
	pass


# cython: wraparound = False
# cython: boundscheck = False


from libc.math cimport sin as m_sin
from libcpp.vector cimport vector
cpdef float sin(float x):
	return m_sin(x)




# distutils: extra_compile_args=-fopenmp
# distutils: extra_link_args=-fopenmp
cimport cython
from cython.parallel import prange
def something(x) nogil:
	pass
for x in prange(1000000, nogil=True):
	something(x)



Py_ssize_t





------------- Big cython sample below -------------

Actual code:

%%cython -lm -a
from libc.math cimport sin as msin
cpdef double sin2(double value):
    return msin(value)
#print(sin(2))




Generated code:

Cython: _cython_magic_a5cb602e92ce03427d3e91982011a0b8.pyx
Generated by Cython 0.29.23

Yellow lines hint at Python interaction.
Click on a line that starts with a "+" to see the C code that Cython generated for it.

 1: from libc.math cimport sin as msin
+2: cpdef double sin2(double value):
static PyObject *__pyx_pw_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_1sin2(PyObject *__pyx_self, PyObject *__pyx_arg_value); /*proto*/
static double __pyx_f_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_sin2(double __pyx_v_value, CYTHON_UNUSED int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin2", 0);
/* â€¦ */
  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_1sin2(PyObject *__pyx_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_1sin2(PyObject *__pyx_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin2 (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("_cython_magic_a5cb602e92ce03427d3e91982011a0b8.sin2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_sin2(__pyx_self, ((double)__pyx_v_value));
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_sin2(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sin2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_46_cython_magic_a5cb602e92ce03427d3e91982011a0b8_sin2(__pyx_v_value, 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_cython_magic_a5cb602e92ce03427d3e91982011a0b8.sin2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
+3:     return msin(value)
  __pyx_r = sin(__pyx_v_value);
  goto __pyx_L0;
 4: #print(sin(2))

