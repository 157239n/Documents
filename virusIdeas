
send kill signal and maintain that signal when deleting a virus

SIDS, security identifiers, added to ACLs, access control lists
permissions:
- https://www.howtogeek.com/72718/how-to-understand-those-confusing-windows-7-fileshare-permissions/
- https://www.online-tech-tips.com/computer-tips/set-file-folder-permissions-windows/
- https://www.dell.com/support/article/us/en/04/sln156352/understanding-file-and-folder-permissions-in-windows?lang=en

dig into icalcs command, have something to do with permissions

how about locking the directory, to prevent deletion by spawning processes that sort of listens to a directory forever? That would be interesting, but would be way too time consuming to implement though

so the plan is to have multiple instances of these homes. But how are they supposed to communicate to each other when they possibly don't even know the location of one another.

Relying in a predetermined location to report the variables is vulnerable and undesirable

so, tasks for today, now that internet doesn't work:
- physics for chi

tasklist:
- image name, smss.exe, svchost.exe
- pid, 0, 4, 1372
- session name, services, console
- session, 0, 1
tasklist /v:
- image name
- pid
- mem usage
- status unknown
- user name
- cpu time
- window title

tasklist /fo csv

taskkill {/pid 9214 | /im image name | /fi ???}

the window won't refresh though

devcon, don't have on work computer, but still an interesting possibility

also add expand all or collapse all option to directory attacks
net command too, but I still don't understand these, so may be for later?

and apparently, batch can also print stuff, like, actually send signals to the printer

may be adding filters would be nice:
- Has window name

attrib???
tree, not much use though
title, sets title

also for monitoring commands, like monitoring tasklist

again, wtf is file attributes? I mean, "%%~a?"

also control volume from the virus? Now these new capabilities are sort of ambitious

publish to github

Okay feeling guilty as fuck for spying on chi. Like, feels exactly the same way as ynes, cause like, I feel like I'm invading her privacy. So may be look around at all the stuff of hers, then tell her about this. She deserves the right to know this. I'm not as bad as the NSA. Okay, so when I'm done, ask to meet with her in person and explain these things in depth and make sure she understands everything about it.

a list of candidate host locations. But like, I can just do a recursive search, test permission, and if permission works, count up a counter, explore that directory and repeat, until the counter reached a random but pre-specified number, then that directory is selected. But like, that still is not random, assuming the first random generator is truely random. So, scans for permitted child directories, then pick a random directory among them and get into that. Then repeat again, for a random number of times from 0 to 8. That eliminates some deterministic behavior, but still sort of biased towards the earlier directories. But I guess this is sort of a price to pay. If I try to fix that with hierarchical-distributed randomness, that would kill the layer-distribution randomness, so pick one or another.

inform user that cancelling an attack does little while the virus is active

so, only 3 stuff left to do: task monitoring, with tasklist and taskkill, timezones, and uptime graph. Do the timezone first, then uptime graph, then task monitoring

also backing up SU.vbs too, to make sure it doesn't go away. This is done by overwriting the file every 5 minutes or so

also masquerading inside chrome's directory or a bunch of other locations, to avoid detection. Also check by hand permissions of these folders to make sure I can write in them. Also learn about windows permission too, like their model is completely different from unix-based stuff

figure out a rough estimate of the stray virus file size if i don't clear it ever so often. So, pings every ~10 seconds, returns back ~100 characters, each character takes 1 byte in utf-8. That would be 10 bytes per second. A month has 2.5mil seconds, which would mean 25MB of data, for one stray virus in a month. That's pretty wild. Shouldn't I direct the virus to log inside of the database? That would be more efficient, mass-wise.

okay, so may be just bundle the virus only, not including the 2 other tiny project

also do this so that if I were to change my hosting location, I can still maintain the old hosting location for a while and every virus instances will naturally go to the new hosting location. This is now possible. Nah wait, may be think into this a little more?

look into session hijacking and can I just do that if I have access to their machines?

benchmark the time to tree C:\ on my local environment using
@echo off
echo %date% %time%>time.txt
tree C:\ > tree.txt
echo %date% %time%>>time.txt
if this is long enough then I can start on other things

so, let's imagine we already have an instance running, called A, then we install another copy in another directory, using a tailored endpoint where we can specify the virus id and the install location. The current new can do it too. No wait, can I, like, make a special init payload that accepts the home page address, then the A instance curls it to a file, then executes that file given that directory. Well I can. No wait, this is more difficult than I thought, because for normal usage, it is curled and piped directly into cmd, in which case %~pd0 is not available and will not ever be available.

okay, so it should work, injecting the second entry point. Now the problem is that I sort of need to differentiate between different entry points, so that self destruct works for them. Now this is quite hard and needs more thinking

how about on ther explore dir, place a checkbox on the left and the user can check in the files they want to see, then click another button that will create a new attack automatically? I think this would be a precursor to me being able to integrate taskkill and tasklist

an idea for attaching stray viruses to user accounts. When the account is active, the user can click a button, to get a config file A, and a random string B and the database stores hash(A, B). The B is the proof or ownership and you can't really guess the random string B if it's long. So, make it like that, make it long enough so that the security will not be breached. Then, the user can provide A and B, then the program reads A, checks if A is valid with the hash, then do the necessary association.

or, just go with the much simpler approach of sending the kill when an unknown virus pings. This is also interesting and may be I should have a self destruct script that can delete the virus-specific SU.vbs file, then I don't need to worry about micromanaging the local environment anymore and can just let the virus mutates freely. Also may be this is a way to have multiple viruses know where each of the viruses are and how many there are, because at the end of the day, there must still be an entrypoint anyway, right? You can't hide there

secure other public endpoints and make sure no one can get in

so, for recovering the previous state, I can build an export command, which will dump mysql out into a file, which can be on mount/. The tool sits within startup/, not mount/, but the sql file will be on mount, and the data file will be on mount/ too. Have 2 separate tools for this. exportSql.sh, exportData.sh, importSql.sh, importData.sh, so on and so fourth. Why can't I just mount startup? Well, because the runtime environment is different from the build environment, and there are some stuff you want to do at build time, and others at runtime.

side note: write a detailed post on building the virus. Just to explain my path on making something simple but yet can be extended. Then I can say about the architecture of stuff like register.php

remap old viruses. Add a command so that they will install the new virus. Once the new virus responded, destroy the old one. May be before this, make another entry point on create the new virus so that the install location and other important information can be transferred to


targets:
- (no idea): technical, android studio, node, apache ant, azure, could be quang's friend
- 247852352125282, 15/10, 16/10, 18/10, 19/10, 20/10, 22/10, 27/10: home windows 7
- 282471455613364, 12/10, 17/10, 29/10, 5/11, 18/11, 18/11, 21/11, 25/11: no idea, could be canada guy

http://157239n.com/files/vectors/generic.txt

http://kelvinho.org/Virus/vectors/!targetId!

so, may be install a certificate authority on their machine, then reroute their hosts file, for dns spoofing, to collect basically every communication channels. But like, signing keys aren't an easy thing to do as of right now, because i don't fucking understand those .pem key files. Like, the signing process is a big deal.

After migration of the v2 targets, which definitely include that guy in canada, start to dig into the research he is doing.

So, a general idea of what the post should be like should include these parts:
- intro, talk about v1, then talk about v2 and what the end philosophy should look like. Then explain the hardship in actual spying, and the kind of glue code, monolithic and bloated code v1 and v2 has.
- talk about the basic boot structure of the application, from the docker configs in the beginning, then specify port mappings, and whatnot. Also talk about the sql schema, the uptimes schema. Then for the model, talk about User, Virus, AttackInterface classes in general
- then talk about AttackInterface in more detail, specify what specifications should it has, how the pluggable-ness should be achieved by php reflection. Then may be talk about similarities with wordpress, for having generalized concepts such as "the loop", and with magento, with generalized concept of to-be-compiled classes, based on some previous C configurationw, and what php modules to compile in.
- after that, explain how that architecture can be extended to handle multiple attack types, and how there really is an option to customize everything, from the intercept generation process, to the batch file generation process, then to the admin screen, dealing with dormant, deployed and executed branchesw
- also talk about the really complicated security mechanism to protect the data while in transit, and also possible problems with switching back and forth between http and https.
- then talk about edge cases, and talk about when the application has outgrown the original vision, and signs where a complete rewrite with the same philosophy should be attempted. This is because well, the real time attacks, that updates automatically, fundamentally needs a new model to handle the workload. These are just not okay to deal with auto-updated attacks, and there is no concept of rolling attack in the 3 types.
- then may be talk about automatic rolling deployments, and how the application signature should not be changed so much, as to be adapted to the old application, and when does it warrants a complete freeze of the system, for rolling updates to occur
- then may be about future directions? But those details are not yet ironed out tho, so may be delay this until after 80% of the post is written
