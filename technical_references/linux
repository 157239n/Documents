Apt:
- apt-get install $package
- apt-get remove $package
- apt-get update: update cache
- apt-get upgrade: upgrade everything
- apt-get source --compile $package: build package from source

Environmental variables:
export MYVAR=test
echo $MYVAR
env

suid: chmod 4750 file
Ctrl+Z to pause, fg (foreground) to resume a program

commands:
- w: users
- nm: list symbols from object file
- grep --invert-match
- head <file>: list the first 10 lines of a file
- cut
- find -iname something_to_find
- size
- locate: locate c header files
- apt-get autoremove|clean
- service apache2 status
- ps -aux: process status
- top
- htop: better of top, displays processes' details
- systemctl list-units --type=mount
- apropos
- chsh: change shell, chsh -s /bin/zsh
- open -a TextEdit ~/.zshrc (open file with specific program, why this style?)
- wget "google.com/file.zip"
- tasksel: task select, for quickly installing a bunch of things
- fdisk -l: list all disks, possibly look for /dev/sda5
- mount /dev/sda5 /mnt/drive
- umount /dev/sda5
- ifconfig (ipconfig in windows)
- dhclient: release and renew ip address
- uname: current kernel information
- ip addr show
- df -ah: df (short for "disk free", checks for disk space), all file systems, human readable formatting
- du -sh <dir>: size of directory
- netstat: open ports, listening sockets
- ufw status: ufw is uncomplicated firewall
- fg: foreground
- tar -cvpzf (create or overwrite backup file, verbose, preserving permissions, tar ball to zip even more, f for creating a file name) backup.tar.gz --exlude=/mnt /var/www
- tar -xvpzf (extract, others are the same) backup.tar.gz -C /recover
- ln /data/file1 ~/file1 (hard linking shit together. Here, /data/file1 is the original file, and ~/file1 is the link)
- ln -s source link (symbolic linking shit together)
- hostname (short hostname)
- hostname -f (fully qualified domain name)
- usermod -aG docker <user>, adds user to the group "docker"

permissions:
- normal ones, 0 -> 7
- suid
- sgid

popular distros:
- damn small linux
- trustix linux

file types: open with ls -l<file_type>
- -: regular file
- d: directory
- c: character device file
- b: block device file
- s: local socket file
- p: named pipe
- l: symbolic link

users:
- adduser <user>
- userdel <user>
- usermod -aG sudo <username>, add user to sudo group

services: start using /etc/init.d/<service name>. It's basically just a daemon lol
- networking

cron jobs:
- crontab -e: edit crontab file
- crontab select-editor

useful aliases
alias tarx='tar -xvpzf'
alias tarz='tar -cvpzf'
alias version='lsb_release -a'

configure files:
./configure --prefix=/usr/local/pcre

inetd is the service that kinda listens to all of the sockets and relay that to other layers. Worked well before the internet happened

"So this leads us to what we know these days as service. It's kinda a super set of a daemon. They often encompasses multiple daemons or a whole bunch of clones of a daemon or various things like that. Old school init can start these things but they don't really get involved with managing them after that."

"... housekeeping functions like ... mounting filesystems, and starting daemons"

for SFTP stuff, use VSFTPd

Raspberry Pi:
- sudo apt-get install libreoffice-style-tango libreoffice-gtk libreoffice-gtk3, for nive libreoffice UI

Swapfiles, to increase RAM:
- fallocate -l 1G /swap. If fail sudo dd if=/dev/zero of=/swapfile bs=1024 count=1048576
- chmod 600 /swap
- mkswap /swap
- swapon /swap
- Making it permanent (so far I don't have to use this, may be because the VPS never gets shutdown): add /swapfile swap swap defaults 0 0 to /etc/fstab
- Status: swapon --show

Remove swap:
- swapoff -v /swapfile
- rm /swapfile

Ip tables:
- Originating article: http://jensd.be/343/linux/forward-a-tcp-port-to-another-ip-or-port-using-nat-with-iptables
- Commands:
  - list all rules: iptables -L
  - input, forward, output chains: iptables -L -n
  - nat-related chains: iptables -t nat -L -n
  - flushing:
    - iptables -F
    - iptables -t nat -F
  - saving rule:
    - iptables-save > /etc/iptables.rules (Ubuntu only)
  - Quickly reroute without hassle:
    - iptables -t nat -A PREROUTING -p tcp --dport <incoming port> -j DNAT --to-destination <dest ip>:<dest port>
    - iptables -t nat -A POSTROUTING -p tcp --dport <dest port> -j SNAT -d <dest ip> --to-source <localhost ip>
Also you might want to remove all known hosts because some terminal emulator will warn you if your dns configs have changed that someone's trying to dns spoof you. If you are using secure shell extension or anything related to chrome, go to the console (Ctrl Shift J) and execute this command: term_.command.removeAllKnownHosts();

run script when starting up:
- edit cron: crontab -e
- add: @reboot /path/to/script

iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE

tables:
- nat
- mangle
- filter

echo "1"> /proc/sys/net/ipv4/ip_forward

non interactive pre seeding (debian-based only): https://serverfault.com/questions/143968/automate-the-installation-of-postfix-on-ubuntu

packages:
- traceroute: inetutils-traceroute
- ip: iproute2
