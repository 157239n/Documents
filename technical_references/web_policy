cross domain:
crossdomain.xml file

<?xml version="1.0"?>
<cross-domain-policy>
  <allow-access-from domain="*" />
</cross-domain-policy>

or you can stick in a trusted domain

---------------------

This is from a book called Web Security & Commerce-O'Reilly (1997), by Simson Garfinkel and Gene Spafford. These are the notes after reading the book

topics included:
- user safet, browser vulnerabilities
- digital certificates, certificate authority, code signing
- cryptography
- web server security
- commerce and society
  - digital payments?
  - blocking software & censorship tech (PICS, RSACi)?
  - cvil/criminal issues faced?

topics with specific attention:
- risks, threats, and benefits
- control access to information
- lessen chances server will be broken into
- procedures for institution
- encryption?
- security issues regarding java, javascript, activex, netscape plugins
- legal issues

I. basics
	1. web history
II. web browser & user risks
	2. history of browsers
	3. java & javascript issues
	4. running arbitrary code on computer
	5. privacy, cookies, secrets disclosure
III. digital certificates?
	6. cryptography
	7. kind of certificates
	8. pros and cons
	9. signing executables, verification process?
IV. cryptography
	10. encryption & message digests
	11. role of encryption
	12. SSL, TLS
V. securing web servers
	13. unix, windows nt & physical security
	14. access controls
	15. CGI
VI. money & society
	16. credit cards, digital cash, others
	17. controlling, totalitarian countries
	18. civil concerns
	19. legal issues survey
VII. summary, technical
	A. anecdote, setting up and securing it
	B. installing TLS on apache2
	C. technical of SSL 3.0
	D. technical of PICS standard
	E. more info?

"technologies such as digital certificates are eliminating the need to use SSL's cryptographic channel for sending usernames and passwords"

"current" SSL implementation:
- export-grade
- domestic

attacker goals:
- steal documents
- corrupt info, format drives
- modify operating system, leave traps, create new security holes
- transfer money from victim to self

so, keys:
- private: used for signing stuff
- public: used for verifying that something was signed

so, pgp messages and stuff

instead of signing John's photograph, the state should sign his public key. So, a trusted 3rd party would say "hey, I can verify that this key belongs to this guy, John". Then, John with his private key can say to everyone "hey, listen to the trusted 3rd party and believe me when I say I'm John. "

certificates, signed by a CA, contains:
- name
- the person's public key
- serial number
- other info

different CA types:
- internal CA
- outsourced employee CA
- outsourced customer CA
- trusted 3rd party CA

so how does key exchange work? right, so sign a message using a public key, then unlock it using a private key. Simple

"other CA public keys can be added manually by the end-user". Right, so this is possible

handling revokes? Use a certificate revocation list (CRL). Basically a list of revoked certs

certification practices statement (CPS). What does it mean when this CA signs something

X.509 v3 Certificate, contains:
- version
- serial number
- algorithm identifier
  - algorithm
  - parameters
- issuer
- period of validity
	- not before date
	- not after date
- subject
- subject's public key
	- algorithm
	- parameters
	- public key
- signature

"The people who are actually setting up these systems seem to be a little wiser. They don't want a system that is perfect, just one that is better than today's paper-based identification systems"

"Copyright is intended to coer the expression of ideas rather than the ideas themselves"

"Registration and marking of copyright may increase statutory penalties awarded if an infringement occurs"

certificate types:
- certification authority certificates: self-signed CA, or signed by other CAs
- server certificates
- personal certificates: passports. Other names include client-side digital certificates, client certificates
- software publisher certificates: sign distributed software. So may be this also sign stuff like drivers? Which is interesting

practices that make host security worse:
- don't consider security as a serious issue
- transmit plaintext passwords
- don't use security tools
- don't get latest updates
- don't track security develpoment in the world
- no logs
- no backups
- no system & network monitoring 

guidelines:
- who's accessing? nature of it (CRUD)? who authorizes it
- who's responsible for:
  - security
  - upgrades
  - backups
  - maintenance
- materials allowed on served pages?
- which sites & external users can access?
- what testing & evaluation before they're installed?
- handling complaints & requests about the server & page content?
- reacting to incident?
- how, when should policy be updated
- who to speak to press? law enforcements?

security tools?
- snapshotting the system, look for weaknesses
- monitor system over time
- scan network, look for network-based weaknessws
- monitor system & networks, determing if an attack is in progress

access control strategies?
- hidden & unpublished urls
- restrict to a few ip addresses
- passwords/other id

logs to track (cgi era):
- time program was run
- pid
- params provided
- invalid params
- host details: name & ip

7 principles of security:
- least privilege
- economy of mechanism: make things simple
- complete mediation: air tight things
- open design: no back doors
- separation of privilege
- least common mechanism: separate users
- psychological acceptability: everything's simple enough so that everyone will use the security mechanism

there's something called signing nondisclosure agreements for 3rd parties

plaintext ---encrypt & key---> ciphertext ---decrypt & key---> plaintext

2 encryption schema:
- symmetric key algorithm, requires both parties know the same key
  - block algos
  - stream algos
- public key algorithm, normally 10 to 100 times slower than symmetric key algorithm -> use public to agree on a key, then use symmetric

symmetric schemes:
- des: data encryption standard
- desx
- triple-des
- blowfish
- idea: international data encryption algorithm
- rc2
- rc4
- rc5

public key schemes:
- diffie-hellman key exchange
- rsa
- elgamal

different hashing functions:
- hmac
- md2
- md4
- md5
- sha
- sha-1

encryption is used for...?
- confidentiality
- authentication
- integrity
- nonrepudiation

it's not used for...>
- protect unencrypted docs
- stolen keys
- ddos
- hiding a message actually sent

popular systems:
- ssl/tls
- pct
- s-http
- cybercash
- dnssec
- kerberos
- ssh

trademark protection: protect name of company
trade secret protection: protect special ingredients to make a meal

"it was easier to maintain the algorithms as a trade secret than to go through the exercise of patenting the algorithms in dozens of countries aroudn the world and then attempting to police the technology". Wait what? I thought patent stuff can only be applicable under 1 jurisdiction? How can international patent stuff be protected?

"Under current US law, cryptography is a munition, and the export of cryptographic machines (including computer programs that implement cryptography) is covered by the Defense Trade Regulations (formerly known as the International Traffic in Arms Regulation - ITAR). As of late December 1996, to export a program that includes cryptography, you need a license from the US Commerce Department"

man, the security book seems to be maniac about the whole regulation thingy, can't export thingy. Does that still happen today? I think not, because I have not reached any legal complexity barriers just yet, and like, tls is offered basically everywhere. And the anonymous group kinda have lots of advocacy for dismantling this, so I guess the landscape has radically changed?

international agreements on cryptography:
- cocom: coordinating committees for multilateral export controls. Impact on international munitions control organization. Dissoled in 1994
- wassenaar arrangement on export controls for conventional arms and dual-use goods and technologies: restrict export of dual-use goods, 1996, signed by 31 countries

certificates contain:
- domain name
- public key
- the company that owns it
- when it was issued
- when it expires
- who issued it
