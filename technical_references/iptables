
Ip tables:
- Originating article: http://jensd.be/343/linux/forward-a-tcp-port-to-another-ip-or-port-using-nat-with-iptables
- Commands:
  - list all rules: iptables -L
  - input, forward, output chains: iptables -L -n
  - nat-related chains: iptables -t nat -L -n
  - flushing:
    - iptables -F
    - iptables -t nat -F
  - saving rule:
    - iptables-save > /etc/iptables.rules (Ubuntu only)
  - Quickly reroute without hassle:
    - iptables -t nat -A PREROUTING -p tcp --dport <incoming port> -j DNAT --to-destination <dest ip>:<dest port>
    - iptables -t nat -A POSTROUTING -p tcp --dport <dest port> -j SNAT -d <dest ip> --to-source <localhost ip>
Also you might want to remove all known hosts because some terminal emulator will warn you if your dns configs have changed that someone's trying to dns spoof you. If you are using secure shell extension or anything related to chrome, go to the console (Ctrl Shift J) and execute this command: term_.command.removeAllKnownHosts();

iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE

tables:
- nat
- mangle
- filter

echo "1"> /proc/sys/net/ipv4/ip_forward

netfilter uses four distinct tables, which store rules regulating 3 kinds of operations on packets:
- filter concerns filtering rules (accepting, refusing, or ignoring a packet). Chains:
  - INPUT: concerns packets whose destination is the firewall itself
  - OUTPUT: concerns packets emitted by the firewall
  - FORWARD: concerns packets passing through the firewall (the host is neither the source or the destination)
- nat concerns translation of source and destination addresses and ports of packets. Chains:
  - PREROUTING: to modify packets as soon as they arrive
  - POSTROUTING: to modify packets when they are ready to go on their way
  - OUTPUT: to modify packers generated by the firewall itself
- mangle concerns other changes to the ip packets (including ToS, type of service, field and other options)
- raw allows other manual modifications on packets before they reach the connection tracking system

each table contains lists of rules called chains. The firewall uses standard chains to handle packets based on predefined circumstances. The administrator can create other chains, which will only be used when referred by one of the standard chains (directly or indirectly)

             network applications
                ^           |
                |           v
              input       output
                ^           |
                |           v
--> prerouting --> forward --> postrouting -->

each chain is a list of rules, each rule is a set of conditions and an action to perform when the conditions are met. When processing a packet the firewall scans the appropriate chain, 1 rule after another, and when the conditions for 1 rule are met, it jumps to the specified action to continue processing

list of actions:
- ACCEPT: allow the packet to go on its way
- REJECT: reject the packet with ICMP error packet sent to the originator
- DROP: delete (ignore) the packet
- LOG: log (via syslogd) a message with a description of the packet. Common params:
  - --log-level: default warning
  - --log-prefix: specifying text prefix to differentiate between other log messages
  - --log-tcp-sequence: tcp sequence number
  - --log-tcp-options: tcp options
  - --log-ip-options: ip options
- ULOG: log message using ulogd, more efficient than syslogd for handling huge number of messages
- {chain name}: jump to given chain and evaluate its rules
- RETURN: interrupt processing of the current chain and return to the calling chain. Still don't get this. What's a calling chain?
- SNAT (only in nat table): apply source network address translation (SNAT)
  - --to-source {address}:{port}, defines new source ip address and/or port
- DNAT (only in nat table): apply destination network address translation (DNAT)
  - --to-destination {address}:{port}, defines new destination ip address/port
- MASQUERADE (only in nat table): apply masquerading (special case of source NAT)
- REDIRECT (only in nat table): transparently redirect a packet to a given port of the firewall itself, can be used to set up a transparent web proxy
  - --to-port:

iptables:
- -t {table}: which table to operate on? Default is filter
- -L {chain}: lists rules in the chain, commonly used with -n
- -n: disable name resolution
- -N {chain}: creates a new chain
- -X {chain}: deletes empty and unused chain
- -A {chain}: adds a rule at the end of the given chain
- -I {chain} {rule_num}: inserts a rule before rule_num
- -D {chain} {rule_num}: deletes a rule in a chain (--line-numbers to get the number)
- -D {chain} {rule}: deletes a rule in a chain by content
- -F {chain}: flushes a chain (delete all the rules)
- -P {chain} {action}: defines default action, or "policy" for a given chain

rules, expressed as {conditions} -j {action} {action_options}:
conditions:
- -p {protocol}: matches protocol field: [tcp, udp, icmp, icmpv6]
- --source-port {port}
- --destination-port {port}
- -s {address}, -s {network/mask}: matches source address of the packet
- -d {address}, -d {network/mask}: matches destination address
- -i {interface}: selects packets coming from the given network interface
- -o {interface}: selects packets going out on a specific interface
- --state {state}: matches state of a packet in a new connection. States:
  - NEW: packet starting a new connection
  - ESTABLISHED: packets belonging to an already existing connection
  - RELATED: for ftp stuff, which I will never tough
