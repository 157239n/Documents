
TODOs for k1lib

tasklist for uploading:
- run mo tutorial, so html generates beautifully
- generate docs
- push main
- push github pages
- upload
- change setup.py version number

(too lazy) cli tool flow analysis:
- Also, may be flow analysis of cli tools might be great. Can just deduce from the init points. Stuff like graphviz seems good
- Even if dependent on incoming stream, can suggest topologies and ask for type info from user. And of course, can check for inconsistencies like iterator used in 2 places
- https://ipython.org/ipython-doc/stable/parallel/dag_dependencies.html
- https://mungingdata.com/python/dag-directed-acyclic-graph-networkx/

Cmd that actually takes in input line by line, and outputs also line by line, and the cmd itself executes in another thread, to optimize for performance

Explain cancel signals
Write in detail what loss landscape actually means

split stream functionality, but both are feeding from the same internal list

tail(file)

blocks(), to get streams of indented blocks

mo:
- tert-butanol
- di-tert-butyl ether
- add parsing support for ketone (2,4-pentadione), carboxylic acid, and aldehydes
- .reorient(), to turn the molecule so that it has nice properties so that we can compare the both of them
- from System, constructs the molecule. This is so that I can save the system to disk and whatnot.

website module automate pull text from sites

io profiler backward shapes

withBasics some error
css classes make .Class style
tutorial on language label thingy?

a module that's pretty advanced built upon graphEqn, so that I can explore chem processes easily

also can just do a normal scheduler, that sets stuff inside Learner itself, cause paramscheduler currently sets param groups' hyperparam.
trigger class, to monitor when the progress flips over to the desired amount

#notest tag on notebook cells
#export,notest can be like this too

Cbs.TrainOnly(cbsName)
Cbs.ValidOnly(cbsName)

repeatFrom don't form a list, for performance reasons
remove shape's tensor special case
lengths say some words about shape
HookModule better docs
streams tutorial relies on cats
explain in .all() how it's kinda like apply()
cli.output examples
reread language names notebook, see if it still makes sense for me
cli applySerial, so that I can specify f(), and it will return f(x), f(f(x)), f(f(f(x))) and so on
cli accumulate write docs
cli consume to "side"
cli trace, get shapes of everything when passed in a sample input
cli mention everything is available under "cli" namespace, if there's a name conflict anywhere
add short circuit path to manyToMany from apply
k1lib.RunOnce(), with revert() and __call__()
k1lib.MaxDepth(), enter(), __call__() or just simply __bool__()
