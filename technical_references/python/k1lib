
Write in detail what loss landscape actually means

mo:
- tert-butanol
- di-tert-butyl ether
- add parsing support for ketone (2,4-pentadione), carboxylic acid, and aldehydes
- .reorient(), to turn the molecule so that it has nice properties so that we can compare the both of them
- from System, constructs the molecule. This is so that I can save the system to disk and whatnot.

website module automate pull text from sites

io profiler backward shapes

css classes make .Class style
tutorial on language label thingy?

also can just do a normal scheduler, that sets stuff inside Learner itself, cause paramscheduler currently sets param groups' hyperparam.
trigger class, to monitor when the progress flips over to the desired amount

cli accumulate write docs

kxml use css to select out stuff
factor out css selectors?

reorg skin, clarify steps, shoot it. https://www.kaggle.com/shubhamgoel27/dermnet/code
document CoreRNN more, specify expected shapes
document what Learner will deposit into itself when run
create a centralized place to see what Callback uses what fields in Learner
ComputationProfiler make the actual computation calc dependent on a monkey-patched function
do progressive deepening, create blocks in knn and whatnot

make plot names of HookParam and HookModule better. It's not optimal at the moment because the interface for selector is strange and whacky, so fix that first

polyfit more resilient
new function that smoothly fit to data points. "Spline" or sth like that

dl tutorial
callback graph docs generator

HookModule, but actually stores forward and backward passes vanilla. Does not store history

k1lib/tests/moparse.ipynb self-consistency checks failed

graphEqn tackle the full problem

also for input clis, turn all of them into classes so that `cat("a.txt") | shape(0)` will be rewritten as `None | cmd("wc -l a.txt")`

rethink tee? every feature too. And there's the consume thing from earlier?
split more docs

Add practice probs for cli

callbacks just have an analysis mode that does not keep records

nuke toList()
serve protected by api key option

callbacks create dependency graph

Make it so that serve can handle sessions, so that image data doesn't have to be resent every time

cli.patchOr(klass)
Cli make intro snippets

test k1a on multiple python versions on windows and make sure it can support 3.7 and beyond

---------------------- cli llvm ----------------------

initially, just a submodule inside main python lib to auto-generate shared library and attach it to the main running process
Also think about whether I can sort of inline the funcs by compiling a whole block of code
You know, if this works then the whole fucking horizontal ai chip future can be leverage much harder and can really pack a punch
Really do the windows build thing, because have to anyway
Concrete goal: read fasta files faster
Also means I can have separate optimizations if I have k1a installed or not

- read java JIT
- see how cython did it
- read pandas source code
- test looping time of real lists and c-yield lists. If roughly the same then can just replace one with the other
- check over ceval a bit this time, to see how control flows typically happen

litmus tests:
- tokenizer

optimizations:

- make it so that (...).all(2) done on a multi-dimensional tensor will automatically resolve to doing the fastest way
- serial op() compile down to single operation
- from "(_ | _ | (_ | _)) | _" decompile into vanilla python
- unwrap serials, so that it's more linear and easier to attack

---------------------- cli llvm end ----------------------

serve fix case when sample inputs have new line characters

k1ui: ffmpeg for windows: https://trac.ffmpeg.org/wiki/Capture/Desktop

cat(), ls() for gg drive, now that S3 is successful

Apache Spark integration:
- think about how would I try to optimize the operations even further
- flatMap = apply() | joinSt()

Add aruco & QR capabilities

toLinks() - miso's ci_dashboard edge case

deref() leave viz.Carousel() alone

grepI(), for grep and then item immediately

viz tool that converts yaml/json into html tree that I can expand out however I want


