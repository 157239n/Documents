
why use HAProxy at all? Because K8S is fucking complicated and Nginx is fucking closed source damnit, and the part about sticky session, health checks and dynamic dns resolutions, they are behind the pay wall, which are you kidding me? I'm not going to pay for that. Both Apache and HAProxy are open sourced, and I can do things however I want.

Sample config (/etc/haproxy/haproxy.cfg):
global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

resolvers dns
    nameserver public-0 127.0.0.11:53
    resolve_retries 100000

backend backend_80
    balance roundrobin
    mode tcp
    server proxy1 proxy1:80 resolvers dns check
    server proxy2 proxy2:80 resolvers dns check

backend backend_443
    balance roundrobin
    mode tcp
    server proxy1 proxy1:443 resolvers dns check
    server proxy2 proxy2:443 resolvers dns check

frontend front_80
    bind *:80
    default_backend backend_80

frontend front_443
    bind *:443
    default_backend backend_443




Another intertesting place is at /etc/default/haproxy

Load balancing options:
- round-robin (short connections)
- leastconn (long connections)
- source (SSL farms)

Resolver options:
- hold valid 2s
- hold refused 1s
- hold timeout 1s
- hold nx 1s
- hold other 1s



