This is an excerpt from a youtube comment of mine. Feels like this sort of gives a clear and strong path

Well, so the context is snowden and basically how computers work and how do they work together. I used to basically try really hard to understand these things few years ago, like trying to buy a domain, trying to set up wamp and whatnot, but I sort of still lacking foundational knowledge. Then I remember reading over exactly this link (https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-ubuntu-18-04) and everything just clicks together, so I hope that you will be able to learn through that.


But on the bigger picture:


Top-notch resources, these are quite rare and I think they are so damn good at conveying information. I call them "gems":
- Learn computer's fundamentals, even to the barebones electronics. This is quite hard, without a top-notch resource. But luckily, there is one that I know of which is Crash Course Computer Science series (https://www.youtube.com/watch?v=tpIctyqH29Q&list=PL8dPuuaLjXtNlUrzyH5r6jN9ulIgZBpdo). I highly recommend episodes 1 through 9: Advanced CPU Designs. After that the series is still good but I think is not fundamental
- Then may be learn something like Processing (home website at processing.org), a programming language based on Java, but gets rid of all the annoying stuff and is entirely focused on art. Processing also has python mode (branded "processing.py") and javascript mode (branded "p5.js") if you're more comfortable with those 2, but I still recommend the vanilla Processing based on Java. One of the founders of Processing is very active in tutorials and whatnot, his name is Daniel Shiffman. Few years ago he had a book called "The nature of code", which I believe is free and I highly suggest you go through that, cause it's so mind blowing, the stuff that Dan showed. Also Dan have been doing a series called "The coding train" on youtube. I have not go through those videos to know whether they're a gem or not, but may be it helps to go along with the book. Also I have to mention that Dan has also made "The nature of code" into a video series (in case reading a book is boring to you), look it up. May be less of a gem is khan academy, because I came to Processing from khan. It was okay, it's not as a gem as Processing, but if some stuff you don't understand, then may be looking at this is a good idea?
- Also while you are learning, aim to understand this talk: The tragedy of systemd (https://www.youtube.com/watch?v=o_AIw9bGogo). This is a very, very technical talk that mentions a lot of interesting things. You will not understand after 3 minutes and this is in no way for beginners, but it gives a high-in-the-sky goal and it gives interesting words for you to look up on google.
- Also learn to program stuff nicely. Typical bootcamps are fine, code.org is fine, khanacademy is fine, but like, this series of articles from MIT really gives content and no bullshit: https://ocw.mit.edu/ans7870/6/6.005/s16/. In case the link is broken, this is MIT's 6.005: Software Construction course. This covers pretty much everything in regards to how to program stuff to be maintainable, free from bugs. This skips all the bullshit of bootcamps and gets real with how software is actually built professionally.
- DigitalOcean documentation. There are a bunch of services they provide, but the most important one is their Virtual Private Server (VPS) which they rebranded as "Droplets". Other companies also provide VPS services, but to my mind no other company has documentation as straight to the point as DigitalOcean. Once you have finished with droplets (long time after you have first used a droplet, think months to 1-2 years), then you can explore other stuff DigitalOcean provides, like Domain/DNS, Clusters, K8S, Load Balancers, Spaces. Of all of that I think you should start with Spaces. But again, by this time, you will likely know where to advance to next. Last point is that these services cost money. The cheapest Droplet they offer is $5/month, which I think is totally worth it, considering the amount of stuff you will be able to learn.


Some general advice:
- Aim to learn things fundamentally. Have an attitude to learn a whole subject rather than following some tutorial for specific case that solves your problem. Of course sometimes you just want to get the job done, but like, if you can choose between learn the whole thing and apply a quick fix, choose to learn the whole thing/subject.
- Also I see there are a lot of movement going to languages like javascript and python, and they are the shinier languages. You can learn that, but I would suggest you learn these 3 fundamental languages: C++ (close to machine), Java (middle ground), and Python (not close to machine and abstract). These 3 languages span most of other languages, in code functionality and style. Like, C# looks, feels, runs like Java. Pascal, C and Go looks feels, runs like C++. Also for syntax, C, C#, C++, Java, JavaScript, PHP look really similar to each other and these languages basically run everything nowadays. Java is used most in the world, C second, C++ third, Python fourth (last time I remembered). PHP runs 80% of websites. So basically, once you learn to look at C-like code, you can basically adapt to any other C-like languages (C-like at the syntax only, not the functionality). Anyway, after doing Processing, start to learn more on the 3 core languages of C++, Java and Python.


Also some pitfalls to avoid:
- Don't use windows. This is, like damn, so fundamental. I started out using windows, like everyone else, and I like it really much, but windows normally abstracted away from what is actually going on in a computer so much. Like, I used to try writing visual basic programs, but it feels like I'm learning how to use microsoft's tool, rather than using the underlying technology and actually understanding them. Also, in the 1970, there was the Unix operating system, and basically 100% of computers ran it (also note, don't use/learn unix, it's really bad nowadays and counterintuitive, although it sounds awesome the way I'm describing it). Then later on macoS takes inspiration from unix, then linux. Then android takes inspiration from linux and ios takes inspiration from macos. So basically, all of these operating systems are more than 90% similar and all are unix-like. So a lot of research and development of like the internet, they happened on unix-like OSes and so, if you learn about any unix-like os, it will feel much more natural and easy to understand. Also unix's philosophy is to sort of be brutally simple, and build functionality on existing programs/ideas, so it will feel much more logical too. That said, I still use windows for cat videos, reddit and whatnot. I just like windows more, but for technical stuff, I strongly recommend learning linux. If you have a mac then it's more or less the same, but anyway, stick to unix-like OSes for technical stuff.


These should get your mind blown several times :)) And if you get stuck just ask someone (most likely searching on google and stack overflow, rather than actually asking someone), or just ask me here again


Edit, if you don't know what Linux to choose from, just go with Ubuntu, no questions asked. But here are more distros for consideration (but really, just use Ubuntu):
- Debian: basically vanilla linux. A lot of other distros are based on debian too, like Kali (for penetration testing), Ubuntu (standard everything), Raspbian (for raspberry pis, a wallet-sized computer)
- Red Hat Enterprise Linux (RHEL): good old tech, proprietary, used by big businesses
- CentOS and Fedora, sort of RHEL, but free