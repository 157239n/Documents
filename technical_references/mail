
required components in a mail server:
- Mail Transfer Agent, handles SMTP traffic:
  - send mail from users to an external MTA
  - receive mail from an external MTA
  - Postfix, Exim, Sendmail
- Mail Delivery Agent/Local Delivery Agent, receives mail from MTA, places in user's mailbox
  - Formats: mbox, Maildir. Each MDA supports specific mailbox formats, determines how messages are stored on the mail server
  - Postfix, Dovecot
- IMAP and/or POP3 Server
  - Protocols, duh, used by mail clients. IMAP: cache, multithread. POP3: simple, don't cache
  - Courier, Dovecot, Zimbra

add components:
- spam filter
  - SpamAssassin
- antivirus
  - ClamAV
- webmail
  - Gmail, Outlook, the interface, Roundcube, Citadel

Alternatives to not doing this:
- Google Apps
- Zoho
- FastMail
- Gandi
- Microsoft Office365

ports:
- smtp: 25 (not secure), 465 (secure, but deprecated since 1990s), 587 (starttls, secure, used till this day)
- imap: 143 (not secure), 993 (secure)
- pop3: 110 (not secure), 995 (secure)
- just give me the ports: 587, 993

not doing this: https://www.digitalocean.com/community/tutorials/why-you-may-not-want-to-run-your-own-mail-server
turns out this is so stupidly hard and requires understanding in so many disciplines that I ended up just using the docker setup below.

SASL: Simple Authentication and Security Layer

virtual_mailbox_domains
virtual_mailbox_maps
virtual_alias_maps

may be common authentication checks needed by mail clients:
- fails to pass 421-4.7.0 authentication checks
- fails to pass 550-5.7.1 authentication checks

dead simple docker container setup. Thank god someone made this: https://github.com/tomav/docker-mailserver

so, the path to doing this is:
- have a server, then have mail.domain.tld points to that server
- then have mail.otherdomain.tld points to that server too, in BOTH A and MX records
the image:
- download 4 files:
  - curl -o setup.sh https://raw.githubusercontent.com/tomav/docker-mailserver/master/setup.sh; chmod a+x ./setup.sh
  - curl -o docker-compose.yml https://raw.githubusercontent.com/tomav/docker-mailserver/master/docker-compose.yml.dist
  - curl -o .env https://raw.githubusercontent.com/tomav/docker-mailserver/master/.env.dist
  - curl -o env-mailserver https://raw.githubusercontent.com/tomav/docker-mailserver/master/env-mailserver.dist
- change configurations
- start the container
- ./setup.sh email list
- ./setup.sh email add user@domain.tld password
- ./setup.sh config dkim to generate the dkim public key
- paste this dkim key (should be at config/opendkim/keys/domain.tld/mail.txt) to the text dns record, host normally is mail._domainkey, but see the dkim key command to modify the zone file to be sure.
- add an spf rule (it's a txt dns record) like v=spf1 mx -all, so that mail clients can make sure an email is authorized from a particular server. For more fine-grained control, consult this: http://www.open-spf.org/SPF_Record_Syntax/
- generate certificate (for all domains the server is gonna handle mail of) using letsencrypt's certbot, store it at /etc/letsencrypt/live/mail.domain.tld/. Modify env-mailserver's SSL_TYPE field to letsencrypt
- go through the environment variables, make sure hostname is mail, domain name is domain.tld AND the container name is mail.domain.tld
- set up reverse dns (PTR record, this is especially painful because many services don't allow changing their PTR record for the vps), so that the server's ip address points to mail.domain.tld, also make sure the regular dns points mail.domain.tld to the server's ip address. Also, there can only be 1 ptr record. All other ptr records will act as aliases with the original one.

if network is 192.168.0.0/24, reverse zone would be 0.168.192.in-addr.arpa
